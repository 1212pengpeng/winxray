import win.ui;
import fonts.fontAwesome;
/*DSG{{*/
var frmv2ray = win.form(text="Winv2ray ";right=959;bottom=591;bgcolor=16777215)
frmv2ray.add(
btnEditPac={cls="plus";text="编辑PAC";left=332;top=367;right=438;bottom=397;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF1C4';notify=1;textPadding={left=30};z=7};
btnImportServerFromClipBd={cls="plus";text="批量导入链接";left=459;top=367;right=592;bottom=397;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF196 ';notify=1;textPadding={left=30};z=8};
btnTcping={cls="plus";text="检测并连接最快服务器";left=735;top=366;right=941;bottom=398;align="left";bgcolor=11580047;border={radius=4};db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=18}};iconText='\uF012';notify=1;textPadding={left=42};z=3};
chkAutoTest={cls="plus";text="异常自动重连 ";left=598;top=367;right=729;bottom=397;align="left";db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF0C8';notify=1;textPadding={left=30};z=9};
edit={cls="edit";left=6;top=405;right=953;bottom=585;bgcolor=0;color=16777215;db=1;dl=1;dr=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=2};
listview={cls="listview";left=4;top=5;right=954;bottom=358;db=1;dl=1;dr=1;dt=1;edge=1;fullRow=1;gridLines=1;z=1};
radioProxy={cls="radiobutton";text="全局代理";left=129;top=369;right=226;bottom=395;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=4};
radioProxyDirect={cls="radiobutton";text="不使用代理";left=14;top=369;right=120;bottom=395;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=6};
radioProxyPac={cls="radiobutton";text="PAC代理";left=234;top=369;right=321;bottom=395;bgcolor=16777215;db=1;dl=1;font=LOGFONT(h=-13);z=5}
)
/*}}*/

frmv2ray.listview.insertColumn("类型",100) 
frmv2ray.listview.insertColumn("服务器",160) 
frmv2ray.listview.insertColumn("端口",70) 
frmv2ray.listview.insertColumn("加密",90) 
frmv2ray.listview.insertColumn("协议",50) 
frmv2ray.listview.insertColumn("备注",190) 
frmv2ray.listview.insertColumn("响应速度",95) 
frmv2ray.listview.insertColumn("状态",-1) 
frmv2ray.listview.setExtended(0x10000/*_LVS_EX_DOUBLEBUFFER*/);

frmv2ray.show();

import config;
import xray.core; 
var currentOutboundIndex,currentOutboundAddress;
var activeOutbound = function(outboundIndex,outboundAddress,enableRetry){
	
	if(!outboundIndex && !outboundAddress){
		outboundIndex,outboundAddress = currentOutboundIndex,currentOutboundAddress;
		if(!outboundIndex && !outboundAddress) {
			return;
		}
	}
	
	var outbound = config.proxy.outbounds[outboundIndex];
	if(!outbound){
		return ; 
	} 
	
	var currentTesting = false;
	if( ! xray.core.isInboundPortChanged() ){
		currentTesting = currentOutboundIndex == outboundIndex && currentOutboundAddress == outboundAddress
	}
 
 	..publish("activeOutbound",false); 
	var startTesting = currentTesting;
	if(!startTesting){
		var started,err = xray.core.restart(frmv2ray.edit,outbound);
		startTesting = started;
		if(!started){
			frmv2ray.edit.print("启动 xray 错误",err:""); 
			frmv2ray.btnTcping.disabledText = null;
			return false;
		}
	}

	if( startTesting  ){
		currentOutboundIndex,currentOutboundAddress = outboundIndex,outboundAddress;
		frmv2ray.autoTesting = true;
		
		..thread.invoke( 
			function(frmv2ray,outboundIndex,outboundAddress,sockProxyPort,httpProxyAddress,enableRetry,currentTesting){
				import web.rest.client;
				var restClient = web.rest.client(,httpProxyAddress);
				restClient._http.setTimeouts(1000,2000,2000);
				var ret = restClient.get("https://www.google.com/generate_204");
				var lastStatusCode = restClient.lastStatusCode;
				
				if( lastStatusCode == 204 ){
					frmv2ray.onStartv2rayComplete(outboundIndex,currentTesting,outboundAddress); 
					return;	
				}
				restClient.close();
				
				if(currentTesting){
					sleep(100);
				}
				
				import inet.http;
				if(inet.http.isAlive(,httpProxyAddress)){
					frmv2ray.onStartv2rayComplete(outboundIndex,currentTesting,outboundAddress);
					return;	
				}
				
				if(currentTesting){
					sleep(100);
				}
				
				import wsock.tcp.socks5Client;
				
				var client;
				for(i=1;2;1){
					sleep(200);
					client = wsock.tcp.socks5Client("127.0.0.1",sockProxyPort); 
					if(client)break;
				}
				
				if(client){
					client.setTimeouts(1000,1000); 
					if(client.connect("www.google.com",80) ){
						
						var sendData =/***********
GET /  HTTP/1.1
Host: www.google.com
Connection: close
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64)
Accept: */*;  
Accept-Language: zh-CN,zh; 
Accept-Charset:utf-8;  
***********/
						client.write( sendData + '\r\n\r\n' )
						var rep = client.read(9);
						client.close();
							
						if( rep && ..string.startWith(rep,"HTTP/1.1 ") ){
							frmv2ray.onStartv2rayComplete(outboundIndex,currentTesting,outboundAddress);
							return;	
						} 
					}
				};
				frmv2ray.onStartv2rayFailed(outboundIndex,enableRetry,outboundAddress);
			},frmv2ray,outboundIndex,outboundAddress, 
			xray.core.socksProxyPort,xray.core.getSystemProxyConfig(),enableRetry,currentTesting
		)

		return true;
	}	
}

var autoUpdateSubscriptionTimerId; 
frmv2ray.autoUpdateSubscription = function(timeout){
		..win.clearTimeout(autoUpdateSubscriptionTimerId); 
		if(timeout===-1){
			autoUpdateSubscriptionTimerId = null;
			return;
		}
		
		if(config.proxy.autoRefreshSubscription){
			autoUpdateSubscriptionTimerId = ..win.setTimeout(function(){
				autoUpdateSubscriptionTimerId = null;
				
				import xray.outbounds;
				xray.outbounds.autoUpdateSubscription(); 
			},timeout:10000)  		
		}
} 

frmv2ray.onStartv2rayComplete = function(outboundIndex,currentTesting,outboundAddress){
	frmv2ray.autoUpdateSubscription(-1);
	
	var outbound = config.proxy.outbounds[outboundIndex];
	var outbound = ..config.proxy.outbounds[outboundIndex];
	if(!(outbound && (outbound.address == outboundAddress))){
		return;
	}
	
	var listview = frmv2ray.listview;
	listview.ensureVisible(outboundIndex);
	for b,v in table.eachIndex(config.proxy.outbounds){
		listview.setItemText("",b,8);
	}
	
	frmv2ray.autoTesting = false;
	listview.setItemText("活动服务器：正常",outboundIndex,8);
	listview.activeOutboundIndex = outboundIndex;

	var address  = listview.getItemText(outboundIndex,2);
	if(!currentTesting) frmv2ray.edit.print("已切换到服务器：",address);
	listview.activeOutboundAddress = address;

	if(listview.getItemText(outboundIndex,7)=="不可用"){
		listview.setItemText("",outboundIndex,7);
	}
		
	frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
		if(address==listview.getItemText(outboundIndex,2)){
			listview.setItemText(speedText,outboundIndex,7);
		}
	};
	frmv2ray.validOutbounds = {};
	
	frmv2ray.btnTcping.disabledText = null;
	..publish("activeOutbound",address); 
}

subscribe("activeOutbound",function(address){
	..globalActiveOutbound = address;
} )

frmv2ray.onStartv2rayFailed = function(outboundIndex,enableRetry,outboundAddress){ 
	..publish("activeOutbound",false); 

	var outbound = ..config.proxy.outbounds[outboundIndex];
	if(!(outbound && (outbound.address == outboundAddress))){
		return;
	}
	
	if(outbound.subscribeUrl){
		frmv2ray.autoUpdateSubscription();
	} 
	
	var listview = frmv2ray.listview;
	listview.ensureVisible(outboundIndex);
	if(listview.activeOutboundIndex==outboundIndex){
		listview.activeOutboundIndex=null;
		listview.activeOutboundAddress = null;
	}
	
	listview.setItemText("不可用",outboundIndex,7);
	if(enableRetry){
		if(#frmv2ray.validOutbounds){
			var next = table.shift(frmv2ray.validOutbounds);
			activeOutbound(next[1],next[2],#frmv2ray.validOutbounds);
			listview.setItemText("异常,测试下一个...",outboundIndex,8);
			frmv2ray.edit.print("服务器异常：",listview.getItemText(outboundIndex,2)); 
			frmv2ray.edit.print("正在尝试连接：",next[2]); 	
		}
		else {
			frmv2ray.btnTcping.oncommand();
		}
	}
	else {
		listview.setItemText("活动服务器：异常",outboundIndex,8);
		frmv2ray.edit.print("已切换到服务器：",listview.getItemText(outboundIndex,2)); 
		frmv2ray.autoTesting = false;
	} 
	
	frmv2ray.btnTcping.disabledText = null;
	
}

var tcping = function(frmv2ray,outboundIndex,outbound){ 
	import wsock.tcp.client; 
	var timeout = 0; 
	var failed = 0;
	for(i=1;8;1){ 
		sleep(1);
		
		var client = wsock.tcp.client(); 	
		var tickBegin = time.tick(); 
		if(client.connectTimeout(outbound.address,tonumber(outbound.port),3)){
			var ret = client.send("."); 
			client.close();
			
			if( ret != 1){  
				frmv2ray.onTcpingReturn(outboundIndex,outbound.address,false,"不可用");
				return;
			}
			timeout =  timeout + (time.tick() - tickBegin);
		}
		else {
			client.close();
			
			failed++;
			if(failed>1){ 
				frmv2ray.onTcpingReturn(outboundIndex,outbound.address,false,"不可用");
				return;	
			} 
		} 
	}
	
	frmv2ray.onTcpingReturn(outboundIndex,outbound.address,true,math.round(timeout / (8-failed) / 1000,2)+"秒"); 
};

var retryOnNetworkAliveTimerId;
frmv2ray.onTcpingFailed = function(){
	frmv2ray.autoTesting = false;
	frmv2ray.btnTcping.disabledText = null;	
	
	if(retryOnNetworkAliveTimerId){
		frmv2ray.clearTimeout(retryOnNetworkAliveTimerId);
	}
		
	if(inet.http.isAlive(,false)){
		frmv2ray.autoUpdateSubscription(1000);
	}
	else {
		retryOnNetworkAliveTimerId = frmv2ray.setInterval( 
			1000,function(){ 

				if(frmv2ray.listview.activeOutboundIndex){
					retryOnNetworkAliveTimerId = null;
					return 0;
				}
				
				if(inet.http.isAlive(,false)){
					frmv2ray.btnTcping.oncommand();
					retryOnNetworkAliveTimerId = null;
					return false;
				}	
			} 
		) 
	}  
} 

import sysProxy; 
import style;
frmv2ray.btnTcping.skin(style.primaryButton);
frmv2ray.btnTcping.oncommand = function(id,event){
	frmv2ray.listview.activeOutboundIndex = null;
	frmv2ray.listview.activeOutboundAddress = null;
	frmv2ray.listview.clearColumnImage();
	
	var items = frmv2ray.listview.items;
	if(#items){
		frmv2ray.btnTcping.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
		
		xray.core.lastDownloadingCoreFailed = false;
		if(!xray.core.getPath()){ 
			frmv2ray.btnTcping.disabledText = null; 
			return;
		} 

		var failedCount = 0;
		frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
			if(address!=frmv2ray.listview.getItemText(outboundIndex,2)){
				return; 
			} 
			frmv2ray.listview.setItemText(speedText,outboundIndex,7);
			
			if(succeeded){
				frmv2ray.listview.setItemText(speedText,outboundIndex,7);
				frmv2ray.validOutbounds = {}
				frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
					if(address!=frmv2ray.listview.getItemText(outboundIndex,2)){
						return; 
					} 
					
					frmv2ray.listview.setItemText(speedText,outboundIndex,7);
					if(succeeded) { 
						table.push(frmv2ray.validOutbounds,{outboundIndex;address});
					}
					else{
						failedCount++;
						if(failedCount==#items) {
							frmv2ray.onTcpingFailed();
						}
					}
				}
				activeOutbound(outboundIndex,address,#items>1);	
			}
			else{
				failedCount++;
				if(failedCount==#items) {
					frmv2ray.onTcpingFailed(); 
				}
			}
		}
			
		thread.createSuspended(true);
		
		var handles = {};
		var outbounds = config.proxy.outbounds;
		var lenPing = 0;
		var listview = frmv2ray.listview;
		for(i=1;#items;1){
			if(outbounds[i].autoConnect===false){
				listview.setItemText("禁止测速",i,7);
				continue;
			}
			
			if(lenPing>config.proxy.maxTestServers){
				frmv2ray.edit.print("测速服务器数超出设定上限:"+config.proxy.maxTestServers + "，您可在「配置 / 高级设置」中修改此值。")
				break;
			}
			lenPing++;
	
			listview.setItemText("...",i,7);
			listview.setItemText("",i,8);
			
			var h = thread.create(tcping,frmv2ray,i,config.proxy.outbounds[i]);	 
			table.push(handles,h);
		} 
		thread.createSuspended(false);
		
		for(i=1;#handles;1){
			var h = handles[i];	 
			thread.resume(h);
			raw.closehandle(h);
		} 
		
		if(#handles) ..thread.waitOne(handles); 
	}
	else {
		if(id) frmv2ray.msgWarn("请先添加服务器")
		xray.core.stop();
		
		frmv2ray.btnTcping.disabledText = null;
		frmv2ray.autoTesting = false;
		frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){};
	}
}

import xray.core;
import xray.pacServer;
frmv2ray.onDestroy = function(){
	xray.core.stop();
	xray.pacServer.stop();
}

var pingThread = function( ip,frmv2ray ) {
	import icmp.ping; 
	var ping = icmp.ping(); 
	
	for(i=1;4;1){
		if( ping.perform(ip) ){
				frmv2ray.edit.print(ip,string.format( "Reply from %s: bytes=%d time=%dms TTL=%d"
				, ping.ip , #ping.requestData  , ping.echoReply.roundTripTime , ping.echoReply.options.ttl ) ); 
		}  
		else {
			frmv2ray.edit.print(ip,"Request timed out");
		}
		
	}
} 

var removeOutbounds = function(selectedItems){
	
	//避免后台线程改变activeIndex
	frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){}; 
	frmv2ray.btnTcping.disabledText = null;
	frmv2ray.autoTesting = false;
	
	var activeIndex = frmv2ray.listview.activeOutboundIndex;  
	var outbounds = config.proxy.outbounds;
	for(i=#outbounds;1;-1){ 
		var ob = outbounds[i];
		if(activeIndex==i){
			ob.active = true;
		}
	}

	if(#selectedItems){
		for(i=#selectedItems;1;-1){
			var item = selectedItems[i] 
			frmv2ray.listview.delItem(item);
			..table.remove(config.proxy.outbounds,item);
		}
	}
	else{
		for(i=#outbounds;1;-1){ 	
			if(frmv2ray.listview.getItemText(i,7)=="不可用"){
				..table.remove(outbounds,i);
				frmv2ray.listview.delItem(i);
			} 
		}
	}

	frmv2ray.listview.activeOutboundIndex = null;
	for(i=1;#outbounds;1){
		if(outbounds[i].active){
			frmv2ray.listview.activeOutboundIndex = i;
			break;
		}
	}
	publish("outbounds.updateConfigJson"); 

	if(activeIndex && (!frmv2ray.listview.activeOutboundIndex) ){
		if(!xray.core.lastDownloadingCoreFailed) frmv2ray.btnTcping.oncommand();
	}
}

import xray.outbounds;
frmv2ray.listview.onnotify = function(id,code,ptr){
	select(code) {
		case 0xFFFFFFF4/*_NM_CUSTOMDRAW*/ {
			var lvcd = frmv2ray.listview.getNotifyCustomDraw(code,ptr);
			if( lvcd.nmcd.dwDrawStage == 0x10001/*_CDDS_ITEMPREPAINT*/)
				return 0x20/*_CDRF_NOTIFYSUBITEMDRAW*/
			elseif( lvcd.nmcd.dwDrawStage == 1/*_CDDS_PREPAINT*/ ){
				return 0x20/*_CDRF_NOTIFYITEMDRAW*/;
			}
			elseif( lvcd.nmcd.dwDrawStage == ( 0x10001/*_CDDS_ITEMPREPAINT*/ | 0x20000/*_CDDS_SUBITEM*/) ){ 
				//注意这里 iSubItem 的索引自0开始( 其他函数通常自1开始 )
				lvcd.clrText = lvcd.nmcd.dwItemSpec % 2 ? 0x373737 : 0;
				lvcd.clrTextBk = lvcd.nmcd.dwItemSpec % 2 ? 0xFFFFFF : 0xF5F5F5;
				
				var item = lvcd.nmcd.dwItemSpec+1;
				if(lvcd.iSubItem==7){ 
					if(frmv2ray.listview.activeOutboundIndex=item){ 
						lvcd.clrTextBk = 0x8AFFC3
					} 
				}
				elseif(lvcd.iSubItem==6){ 
					if(..config.proxy.outbounds[item].autoConnect===false){ 
						lvcd.clrText = 0xCCCCCC;
					} 
				}
				lvcd.update()
				
				return 0/*_CDRF_DODEFAULT*/
			}
		}
		case  0xFFFFFFFD/*_NM_DBLCLK*/ {
			var nm = frmv2ray.listview.getNotifyMessage(code,ptr);
			if( nm ){
				xray.core.lastDownloadingCoreFailed = false;
				
				frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
					if(address==frmv2ray.listview.getItemText(outboundIndex,2)){
						frmv2ray.listview.setItemText(speedText,outboundIndex,7);
					} 
				}
				frmv2ray.btnTcping.disabledText = null;
				
				for b,v in table.eachIndex(config.proxy.outbounds){
					frmv2ray.listview.setItemText("",b,8);
				}
				activeOutbound(nm.iItem,frmv2ray.listview.getItemText(nm.iItem,2),false); 
			}
		}
		case 0xFFFFFFFB/*_NM_RCLICK*/  {
			var x,y = win.getCursorPos();
			var nm = frmv2ray.listview.getNotifyMessage(code,ptr);
			if(!nm) return;

			var currentIdx = nm.iItem;
			if(!currentIdx){
				var popmenu = win.ui.popmenu(frmv2ray);
				popmenu.add("新增代理服务器",function(id){ 
					var frmOutbound = frmv2ray.loadForm("\forms\main\outbound.aardio"); 
					frmOutbound.doModal() 
				});
				
				popmenu.add("自剪贴板批量导入分享链接、订阅源",function(id){
					frmv2ray.btnImportServerFromClipBd.oncommand();
				});
				
				popmenu.add('立即更新所有订阅源',function(id){
					xray.outbounds.updateSubscription();
				});
				
				popmenu.add(); 
				
				popmenu.add('清空服务器列表',function(id){
					config.proxy.outbounds = ..table.array();
					frmv2ray.listview.clear();
					
					frmv2ray.btnTcping.disabledText = null;
					frmv2ray.autoTesting = false;
					frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){}  
					publish("outbounds.updateConfigJson");
				});
				
				popmenu.add('清除「不可用」服务器',function(id){
					removeOutbounds();
				});	
				
				popmenu.add("重置为默认服务器列表",
					function(id){
						..config.__loadDefaultOutbounds();
						publish("outbounds.updateConfigJson");
						publish("uiCommand.restartxrayCore");
					}
				);
				popmenu.add();
				
				if(!frmv2ray.btnTcping.disabledText){
					popmenu.add('按「响应速度」排序服务器',function(id){
						frmv2ray.listview.sortBySpeed();
					});	 
					popmenu.add();
				}; 
				popmenu.popup(x,y,true);
				return;
			}
			
			var selectedItems = frmv2ray.listview.selected; 
			var popmenu = win.ui.popmenu(frmv2ray);
			
			if(#selectedItems==1){
				popmenu.add('设为活动服务器( 鼠标双击 )',function(id){
					if(currentIdx){
						xray.core.lastDownloadingCoreFailed = false;
						
						frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){
							if(address==frmv2ray.listview.getItemText(outboundIndex,2)){
								frmv2ray.listview.setItemText(speedText,outboundIndex,7);
							} 
						}
						
						frmv2ray.btnTcping.disabledText = null;
						
						for b,v in table.eachIndex(config.proxy.outbounds){
							frmv2ray.listview.setItemText("",b,8);
						}
						activeOutbound(currentIdx,frmv2ray.listview.getItemText(currentIdx,2),false)
					}
				});

				popmenu.add();
			}
			 
			popmenu.add("编辑 / 新增代理服务器",function(id){ 
				var frmOutbound = frmv2ray.loadForm("\forms\main\outbound.aardio");
				frmOutbound.setOutboundConfig(config.proxy.outbounds[currentIdx]);
				frmOutbound.doModal() 
			});
			
			popmenu.add("自剪贴板批量导入分享链接、订阅源",function(id){
				frmv2ray.btnImportServerFromClipBd.oncommand();
			});
			 
			var subscribeUrl = config.proxy.outbounds[currentIdx][["subscribeUrl"]];
			if(#selectedItems=1 && subscribeUrl){
				
				var ps;
				var cfgSubscribeUrls = ..config.proxy.subscribeUrls;
				for(i=#cfgSubscribeUrls;1;-1){
					var sub = cfgSubscribeUrls[i]  
					if(sub.url===subscribeUrl) {
						ps = sub.ps;
						break;
					}
				}
				
				if(#ps){
					ps = ": "+ps;
				}
			
				popmenu.add('更新当前订阅源'+ps,function(id){
					if(currentIdx){
						xray.outbounds.updateSubscription({[subscribeUrl]=true});
					}
				});	
			}

			popmenu.add('更新所有订阅源',function(id){
				if(currentIdx){
					xray.outbounds.updateSubscription();
				}
			});	
			 
			popmenu.add()

			var autoConnect = config.proxy.outbounds[currentIdx].autoConnect!==false; 
			var id = popmenu.add('允许自动测速并连接',function(id){
				if(currentIdx){
					for(i=#selectedItems;1;-1){ 
						var item = selectedItems[i];
						if(autoConnect === false){
							config.proxy.outbounds[item].autoConnect = null;
							frmv2ray.listview.setItemText("",item,7);
						}
						else {
							config.proxy.outbounds[item].autoConnect = false;
							frmv2ray.listview.setItemText("禁止测速",item,7);
						}
					}
				}
			});
			popmenu.check(id,autoConnect,0/*_MF_BYCOMMAND*/); 
			popmenu.add()
			
			popmenu.add('删除服务器',function(id){
				removeOutbounds(selectedItems);
			});
				
			popmenu.add('清空服务器列表',function(id){
				if(currentIdx){
					config.proxy.outbounds = ..table.array();
					frmv2ray.listview.clear();
					publish("outbounds.updateConfigJson");
				}
			});
			
			popmenu.add('清除「不可用」服务器',function(id){
				removeOutbounds();
			});	
			
			popmenu.add("重置为默认服务器列表",
				function(id){
					..config.__loadDefaultOutbounds();
					publish("outbounds.updateConfigJson");
					publish("uiCommand.restartxrayCore");
				}
			);  
			 
			if(#selectedItems==1){	
		 
				popmenu.add();
				popmenu.add('生成二维码',function(id){
					if(currentIdx){
						import xray.outbounds;
						import win.clip;
						
						var str = xray.outbounds.exportSharedLinks({config.proxy.outbounds[currentIdx]});
						if(str){ 
							var frmChild = frmv2ray.loadForm("\forms\main\tools\qr.aardio");
							frmChild.createQrCode(str);
							frmChild.show();
						}  
					}
				});
				
				popmenu.add('复制服务器分享链接',function(id){
					if(currentIdx){
						import xray.outbounds;
						import win.clip;
						
						var str = xray.outbounds.exportSharedLinks({config.proxy.outbounds[currentIdx]});
						if(str){ 
							win.clip.write(str); 
							frmv2ray.edit.print("已复制链接:",str);
						}  
					}
				});

				popmenu.add();
				
				var toolMenu = win.ui.popmenu(frmv2ray)
				toolMenu.add('本机 Ping 检测',function(id){
					if(currentIdx){
						thread.invoke(pingThread,config.proxy.outbounds[currentIdx].address,frmv2ray)
					}
				});
					
				toolMenu.add('全球范围 Ping 检测 ...',function(id){
					if(currentIdx){
						process.openUrl("http://ping.pe/" + config.proxy.outbounds[currentIdx].address)
					}
				});
				
				toolMenu.add('全球范围端口检测 ...',function(id){
					if(currentIdx){
						process.openUrl("http://port.ping.pe/" + config.proxy.outbounds[currentIdx].address + ":" + config.proxy.outbounds[currentIdx].port)
					}
				});
				
				toolMenu.add('在线路由跟踪检测 ...',function(id){
					if(currentIdx){
						process.openUrl("https://www.boce.com/traceroute/" + config.proxy.outbounds[currentIdx].address)
					}
				});
				
				toolMenu.add('本机路由检测',function(id){
					if(currentIdx){
						import process;
						process.execute("cmd.exe","/k tracert " + config.proxy.outbounds[currentIdx].address);
					}
				});

				if(config.proxy.outbounds[currentIdx].port == 443 && config.proxy.outbounds[currentIdx].tls){
					toolMenu.add('浏览 HTTPS 主页 ...',function(id){
						if(currentIdx){
							process.openUrl("https" ++ "://" + config.proxy.outbounds[currentIdx].address); 
						}
					});	 
				}
				
				popmenu.add("服务器工具",toolMenu)
				
				popmenu.add('SSH 登录服务器',function(id){
					if(currentIdx){
						if(_STUDIO_INVOKED){
							frmv2ray.msgErr("请在发布后运行此功能");
							return;
						}
						import process;
						process.execute(io._exepath,"/sshLogin root@" 
							+ config.proxy.outbounds[currentIdx].address + ":" 
							+ (config.proxy.outbounds[currentIdx].sshPort||22));
					}
				});  
			}
			popmenu.popup(x,y,true);
		}
		case 0xFFFFFF94/*_LVN_COLUMNCLICK*/{
			var nm = frmv2ray.listview.getNotifyMessage(code,ptr)
			if(nm.iSubItem==7){
				frmv2ray.listview.sortBySpeed();
			} 
			else {
				frmv2ray.msgWarn("排序请点击「响应速度」列")
			}
		}
	}
}

// 排序函数
frmv2ray.listview.sortBySpeed = function () {
	if(frmv2ray.btnTcping.disabledText){
		frmv2ray.msgWarn("请等待测速完成，然后再点击此排序列。");
		return;
	}
	
	var outbounds = ..table.clone(config.proxy.outbounds);
	var activeIndex = frmv2ray.listview.activeOutboundIndex;
	frmv2ray.onTcpingReturn = function(outboundIndex,address,succeeded,speedText){}; //避免后台线程改变activeIndex
	
	for(i=#outbounds;1;-1){
		var ob = outbounds[i];
		if(type(ob)!="table"){
			table.remove(outbounds,i);
			continue;
		}
		
		ob.speed = frmv2ray.listview.getItemText(i,7);
		if(ob.speed=="不可用"){
			ob.speedNum = 0xFFFE;
		}
		elseif(ob.speed==""){
			ob.speedNum = 0xFFFF;
		}
		elseif(ob.speed=="..."){
			frmv2ray.msgWarn("请等待检测速度完成，然后再点击此排序列。")
			return;
		}
		else {
			ob.speedNum = tonumber(ob.speed):-3;
		} 
		
		if(activeIndex==i){
			ob.active = true;
		}
	}
	
	var hasStatus;
	for(i=1;#outbounds;1){
		if(#outbounds[i].speed){
			hasStatus = true;
			break;
		}
	}
	
	if(!hasStatus){
		frmv2ray.msgWarn("请先点击「检测并连接服务器」获取服务器响应速度！");
		return;
	}
	
	var desc = frmv2ray.listview.getColumnImage(7) == 0;
	if(desc){
		table.sort(outbounds,function(b){ 
			return owner.speedNum > b.speedNum;
		})	
	}
		else {
			table.sort(outbounds,function(b){ 
			return owner.speedNum < b.speedNum;
		})
		} 
	
	frmv2ray.listview.activeOutboundIndex = null;
	for(i=1;#outbounds;1){
		if(outbounds[i].active){
			frmv2ray.listview.activeOutboundIndex = i;
			break;
		}
	}
	
	outbounds.fields = {"protocol";"address";"port";"security";"network";"ps";"speed"}
	config.proxy.outbounds = outbounds;
	frmv2ray.listview.setTable(outbounds);	
	outbounds.fields = {"protocol";"address";"port";"security";"network";"ps"}
	
	//清理用于排序的临时字段
	for(i=1;#outbounds;1){
		var ob = outbounds[i];
		ob.speedNum = null;
		ob.speed = null;
		ob.active = null;
	} 
	
	if(frmv2ray.listview.activeOutboundIndex){
		frmv2ray.listview.setItemText("活动服务器：正常",frmv2ray.listview.activeOutboundIndex,8)
	} 
	frmv2ray.listview.setColumnImage(7, desc ? 1 : 0);
}

import win.imageList;
var iml = win.imageList(16, 15);
iml.add('GIF\56\57a \0\15\0\x80\0\0\x80\x80\x80\xff\0\xff\33\xf9\4\0\0\0\0\0\44\0\0\0\0 \0\15\0\0\2\31\x8c\x8f\xa9\xcb\xed\15\xa3\x9c\xb4N\xf0\x80\xde\56k\xbfA\\\xd7\x84 \x97Y\xea\xca\xb6\xee\11\xc7F\1\0;', 0xff00ff);
frmv2ray.listview.setColumnImageList(iml);

subscribe("uiCommand.restartxrayCore",function(){ 
	config.proxy.outbounds.fields = {"protocol";"address";"port";"security";"network";"ps";}
	
	var outbounds = config.proxy.outbounds;
	for(i=#outbounds;1;-1){
		if(type(outbounds[i])!="table"){
			table.remove(outbounds,i);
		}
	}
	frmv2ray.listview.setTable(outbounds);	 
	
	if(!xray.core.lastDownloadingCoreFailed) frmv2ray.btnTcping.oncommand();
} )

import process;
if(#config.proxy.outbounds){
	config.proxy.outbounds.fields = {"protocol";"address";"port";"security";"network";"ps";}
	
	var outbounds = config.proxy.outbounds;
	for(i=#outbounds;1;-1){
		if(type(outbounds[i])!="table"){
			table.remove(outbounds,i);
		}
	}
	frmv2ray.listview.setTable(outbounds);	
	
	frmv2ray.setTimeout( 
		function(){
			publish("uiCommand.restartxrayCore");	
		},1000
	);	
}

subscribe("sysProxy.modeChanged",function(mode){
	frmv2ray.radioProxyPac.checked = false;
	frmv2ray.radioProxy.checked = false;
	frmv2ray.radioProxyDirect.checked = false;
	
	if(mode = "pac"){
		frmv2ray.radioProxyPac.checked = true;
	}
	elseif(mode = "proxy"){
		frmv2ray.radioProxy.checked = true;
	}
	else{
		frmv2ray.radioProxyDirect.checked = true;
	}
} )
publish("sysProxy.modeChanged",config.proxy.mode);

import sysProxy;
var switchProxyMode = function(){
	if(frmv2ray.radioProxyPac.checked){
		sysProxy.switchToPacMode();	
	}
	elseif(frmv2ray.radioProxy.checked){
		sysProxy.switchToGlobalMode();	
	}
	else {
		sysProxy.switchToDirectMode();	
	}  
}
frmv2ray.radioProxyPac.oncommand = switchProxyMode;
frmv2ray.radioProxy.oncommand = switchProxyMode;
frmv2ray.radioProxyDirect.oncommand = switchProxyMode;

import win.dlg.message; 
frmv2ray.btnEditPac.skin(style.plainButton)
frmv2ray.btnEditPac.oncommand = function(id,event){
	if(frmPac && win.isWindow(frmPac.hwnd)){
		if( win.isIconic(frmPac.hwnd) ) win.show(frmPac.hwnd,9/*_SW_RESTORE*/ );
		if( !win.isVisible(frmPac.hwnd) ) win.show(frmPac.hwnd,0x1/*_SW_NORMAL*/ );
		win.setForeground(frmPac.hwnd)
		return;
	}

	frmPac = ..mainForm.loadForm("\forms\main\pac.aardio");
	frmPac.show();
}
subscribe("uiCommand.showPacForm",function(...){
	frmv2ray.btnEditPac.oncommand();
} )

subscribe("uiCommand.print",function(...){
	frmv2ray.edit.print(...);
} )

import xray.outbounds;
frmv2ray.btnImportServerFromClipBd.skin(style.plainButton)
frmv2ray.btnImportServerFromClipBd.oncommand = function(id,event){
	var str = ..win.clip.read();
	if(str){  
		str = ..string.trim(str,'"\'\t\r\n '); 
		if( ..string.startWith(str,"http://") 
			|| ..string.startWith(str,"https://") 
			|| ..string.match(str,"^\s*/\N+\s*$") ){
			if(..string.match(str,"^\s*/\N+\s*$")){
				str = "https://github.com" + str;
			}
			
			xray.outbounds.updateSubscription({[str]=true});
			return;
		}

		var outbounds = xray.outbounds.importFromString(str);
		if(#outbounds){
			..table.append(config.proxy.outbounds,outbounds); 
			publish("uiCommand.restartxrayCore");
			publish("outbounds.updateConfigJson");
			frmv2ray.msgOk("已成功导入" + #outbounds + "个服务器",1200); 
			return; 
		}
	}

	frmv2ray.msgFrown('未导入服务器！\r\n请先复制以下格式文本（自动清除其中的无效内容）：\r\n\r\n1、一行或多行（忽略无效行）分享链接或服务器JSON配置。\r\n支持 vmess://，vless://，ss://，ssr://，trojan://， trojan-go:// 等通用分享链接。\r\n\r\n2、包含多个服务器配置的JSON数组,支持Winv2ray格式以及通用格式JSON。\r\n\r\n3、单个 http:// 或 https:// 开头的通用订阅源地址。\r\n可直接使用浏览器地址栏的github文件地址（含blob或raw目录名）。\r\n也可以仅复制单斜杆开始的github文件路径。\r\n\r\n订阅源可用BASE64编码或明文返回以上1、2条规定的配置或分享链接。')
}

var testTimerId;
frmv2ray.chkAutoTest.oncommand = function(id,event){
	if(testTimerId){
		frmv2ray.clearInterval(testTimerId);
	}

	config.proxy.test = frmv2ray.chkAutoTest.checked;
	if(!config.proxy.test) return;

	import inet.http;
	testTimerId = frmv2ray.setInterval( 
		config.proxy.testInterval*1000,function(){
			if(frmv2ray.btnTcping.disabled) return;
			if( frmv2ray.autoTesting ) return; 

			var idx = frmv2ray.listview.activeOutboundIndex;
			var address = frmv2ray.listview.activeOutboundAddress;
			if( !( idx&&address) ){ 
				if(!inet.http.isAlive(,false)){
					return config.proxy.testInterval*1000;
				}
				
				if(!xray.core.lastDownloadingCoreFailed) frmv2ray.btnTcping.oncommand();
				return; 
			}
			
			frmv2ray.autoTesting = true; 
			activeOutbound(idx,address,true);
			
			return config.proxy.testInterval*1000;
		} 
	)
}

if(config.proxy.test){
	frmv2ray.chkAutoTest.checked = true;
	frmv2ray.chkAutoTest.oncommand();
}

frmv2ray.chkAutoTest.skin(style.checkBox);


frmv2ray.enableDpiScaling();
win.loopMessage();